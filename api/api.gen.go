// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/oklog/ulid/v2"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateCreditGrantRequest Grants are used to increase balance of specific subjects.
type CreateCreditGrantRequest = credit.Grant

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantResponse defines model for CreditGrantResponse.
type CreditGrantResponse = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantID defines model for creditGrantID.
type CreditGrantID = ulid.ULID

// CreditQueryLimit defines model for creditQueryLimit.
type CreditQueryLimit = int

// FeatureID defines model for featureID.
type FeatureID = ulid.ULID

// LedgerID defines model for ledgerID.
type LedgerID = ulid.ULID

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = ulid.ULID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query a specific ledger
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of ledgers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Start returning ledgers from this offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsByLedgerParams defines parameters for ListCreditGrantsByLedger.
type ListCreditGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditHistoryParams defines parameters for GetCreditHistory.
type GetCreditHistoryParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreateCreditGrantRequest

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List credit grants for multiple ledgers
	// (GET /api/v1/ledgers/grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetCreditBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListCreditGrantsByLedgerParams)
	// Create credit grant
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void credit grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID)
	// Get credit grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID)
	// Get credit ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetCreditHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditHistoryParams)
	// Reset credit balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetCredit(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants for multiple ledgers
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListCreditGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetCreditHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset credit balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantID" -------------
	var creditGrantID CreditGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantID", chi.URLParam(r, "creditGrantID"), &creditGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, ledgerID, creditGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantID" -------------
	var creditGrantID CreditGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantID", chi.URLParam(r, "creditGrantID"), &creditGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, ledgerID, creditGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCreditHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListCreditGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{creditGrantID}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{creditGrantID}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetCreditHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
