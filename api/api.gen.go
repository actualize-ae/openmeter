// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/oklog/ulid/v2"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreateLedgerGrantRequest Grants are used to increase balance of specific subjects.
type CreateLedgerGrantRequest = credit.Grant

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// LedgerBalance Balance of a subject.
type LedgerBalance = credit.Balance

// LedgerEntry A ledger entry.
type LedgerEntry = credit.LedgerEntry

// LedgerEntryType defines model for LedgerEntryType.
type LedgerEntryType = credit.LedgerEntryType

// LedgerGrantBalance defines model for LedgerGrantBalance.
type LedgerGrantBalance = credit.Grant

// LedgerGrantExpirationPeriod Expiration period of a ledger grant.
type LedgerGrantExpirationPeriod = credit.ExpirationPeriod

// LedgerGrantResponse defines model for LedgerGrantResponse.
type LedgerGrantResponse = credit.Grant

// LedgerGrantRollover Grant rollover configuration.
type LedgerGrantRollover = credit.GrantRollover

// LedgerGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type LedgerGrantRolloverType = credit.GrantRolloverType

// LedgerGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type LedgerGrantType = credit.GrantType

// LedgerReset Ledger reset configuration.
type LedgerReset = credit.Reset

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// UpsertLedgerBySubject A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type UpsertLedgerBySubject = credit.UpsertLedger

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// FeatureID defines model for featureID.
type FeatureID = ulid.ULID

// LedgerGrantID defines model for ledgerGrantID.
type LedgerGrantID = ulid.ULID

// LedgerID defines model for ledgerID.
type LedgerID = ulid.ULID

// LedgerQueryLimit defines model for ledgerQueryLimit.
type LedgerQueryLimit = int

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = ulid.ULID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query a specific ledger
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of ledgers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Start returning ledgers from this offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListLedgerGrantsParams defines parameters for ListLedgerGrants.
type ListLedgerGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLedgerBalanceParams defines parameters for GetLedgerBalance.
type GetLedgerBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListLedgerGrantsByLedgerParams defines parameters for ListLedgerGrantsByLedger.
type ListLedgerGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLedgerHistoryParams defines parameters for GetLedgerHistory.
type GetLedgerHistoryParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// UpsertLedgerBySubjectJSONRequestBody defines body for UpsertLedgerBySubject for application/json ContentType.
type UpsertLedgerBySubjectJSONRequestBody = UpsertLedgerBySubject

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateLedgerGrantJSONRequestBody defines body for CreateLedgerGrant for application/json ContentType.
type CreateLedgerGrantJSONRequestBody = CreateLedgerGrantRequest

// ResetLedgerJSONRequestBody defines body for ResetLedger for application/json ContentType.
type ResetLedgerJSONRequestBody = LedgerReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Upserts the specified ledger
	// (PATCH /api/v1/ledgers)
	UpsertLedgerBySubject(w http.ResponseWriter, r *http.Request)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List grants for multiple ledgers.
	// (GET /api/v1/ledgers/grants)
	ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams)
	// List ledger grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams)
	// Create a grant on a specific ledger.
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void ledger grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get a single grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get the history of a ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams)
	// Reset the ledger's balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upserts the specified ledger
// (PATCH /api/v1/ledgers)
func (_ Unimplemented) UpsertLedgerBySubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for multiple ledgers.
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ledger grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a grant on a specific ledger.
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void ledger grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the history of a ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset the ledger's balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertLedgerBySubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertLedgerBySubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertLedgerBySubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrants operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerBalance operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedgerGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerHistory operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetLedger operation middleware
func (siw *ServerInterfaceWrapper) ResetLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetLedger(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/ledgers", wrapper.UpsertLedgerBySubject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListLedgerGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetLedgerBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListLedgerGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.VoidLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.GetLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetLedgerHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
