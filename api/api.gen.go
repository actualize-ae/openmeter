// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/oklog/ulid/v2"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreateLedgerGrantRequest Grants are used to increase balance of specific subjects.
type CreateLedgerGrantRequest = credit.Grant

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// LedgerBalance Balance of a subject.
type LedgerBalance = credit.Balance

// LedgerEntry A ledger entry.
type LedgerEntry = credit.LedgerEntry

// LedgerEntryType defines model for LedgerEntryType.
type LedgerEntryType = credit.LedgerEntryType

// LedgerGrantBalance defines model for LedgerGrantBalance.
type LedgerGrantBalance = credit.Grant

// LedgerGrantExpirationPeriod Expiration period of a ledger grant.
type LedgerGrantExpirationPeriod = credit.ExpirationPeriod

// LedgerGrantResponse defines model for LedgerGrantResponse.
type LedgerGrantResponse = credit.Grant

// LedgerGrantRollover Grant rollover configuration.
type LedgerGrantRollover = credit.GrantRollover

// LedgerGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type LedgerGrantRolloverType = credit.GrantRolloverType

// LedgerGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type LedgerGrantType = credit.GrantType

// LedgerReset Ledger reset configuration.
type LedgerReset = credit.Reset

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// UpsertLedgerBySubject A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type UpsertLedgerBySubject = credit.UpsertLedger

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// FeatureID defines model for featureID.
type FeatureID = ulid.ULID

// LedgerGrantID defines model for ledgerGrantID.
type LedgerGrantID = ulid.ULID

// LedgerID defines model for ledgerID.
type LedgerID = ulid.ULID

// LedgerQueryLimit defines model for ledgerQueryLimit.
type LedgerQueryLimit = int

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = ulid.ULID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query a specific ledger
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of ledgers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Start returning ledgers from this offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListLedgerGrantsParams defines parameters for ListLedgerGrants.
type ListLedgerGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLedgerBalanceParams defines parameters for GetLedgerBalance.
type GetLedgerBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListLedgerGrantsByLedgerParams defines parameters for ListLedgerGrantsByLedger.
type ListLedgerGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLedgerHistoryParams defines parameters for GetLedgerHistory.
type GetLedgerHistoryParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// UpsertLedgerBySubjectJSONRequestBody defines body for UpsertLedgerBySubject for application/json ContentType.
type UpsertLedgerBySubjectJSONRequestBody = UpsertLedgerBySubject

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateLedgerGrantJSONRequestBody defines body for CreateLedgerGrant for application/json ContentType.
type CreateLedgerGrantJSONRequestBody = CreateLedgerGrantRequest

// ResetLedgerJSONRequestBody defines body for ResetLedger for application/json ContentType.
type ResetLedgerJSONRequestBody = LedgerReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Upserts the specified ledger
	// (PATCH /api/v1/ledgers)
	UpsertLedgerBySubject(w http.ResponseWriter, r *http.Request)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List grants for multiple ledgers.
	// (GET /api/v1/ledgers/grants)
	ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams)
	// List ledger grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams)
	// Create a grant on a specific ledger.
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void ledger grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get a single grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get the history of a ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams)
	// Reset the ledger's balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upserts the specified ledger
// (PATCH /api/v1/ledgers)
func (_ Unimplemented) UpsertLedgerBySubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for multiple ledgers.
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ledger grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a grant on a specific ledger.
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void ledger grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the history of a ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset the ledger's balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertLedgerBySubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertLedgerBySubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertLedgerBySubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrants operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerBalance operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedgerGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerHistory operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetLedger operation middleware
func (siw *ServerInterfaceWrapper) ResetLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetLedger(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/ledgers", wrapper.UpsertLedgerBySubject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListLedgerGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetLedgerBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListLedgerGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.VoidLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.GetLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetLedgerHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
